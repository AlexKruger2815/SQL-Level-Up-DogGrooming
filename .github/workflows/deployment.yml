name: CI

on: [push]

env:
  AWS_REGION : "eu-west-1"
  AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_AMI_XXX: ${{ secrets.AWS_AMI_XXX }}                       # Unimplemented
  AWS_SG_XXX: ${{ secrets.AWS_SG_XXX }}                         # Unimplemented
  AWS_SUBNET_XXX: ${{ secrets.AWS_SUBNET_XXX }}                 # Unimplemented

  TF_VAR_db_username: ${{ secrets.DB_NAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  FW_HOST: ${{ secrets.DB_SERVER_HOST_NAME }}
  FW_NAME: ${{ secrets.DB_NAME }}
  FW_USER: ${{ secrets.DB_USERNAME }}
  FW_PASS: ${{ secrets.DB_PASSWORD }}

permissions:
  id-token: write
  contents: read

jobs:

  ConfigureAWS:
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Debug
      run: ls

    - name: Set up Terraformd
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0
        
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_working_dir: 'Infrastructure'
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'init'
    
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_working_dir: 'Infrastructure'
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'plan'
        
    - name: Terraform Apply
      #working-directory: ./Infrastructure
      run: terraform apply -auto-approve tfplan -var="db_username=${{ env.TF_VAR_db_username }}" -var="db_password==${{ env.TF_VAR_db_password }}"

  AmazonWebServices:
    #needs: InfrastructureAsCode
    runs-on: ubuntu-latest
    
    steps:
    - name: Launch AWS Server
      run: |
        # Use AWS CLI or SDK to launch the server
        # Example:
        aws ec2 run-instances --image-id ${{ env.AMI-XXX }} --count 1 --instance-type t2.micro --key-name my-key-pair --security-group-ids ${{ env.SG-XXX }} --subnet-id ${{ env.SUBNET-XXX }}

  FlywayMigration:
    needs: AmazonWebServices
    runs-on: ubuntu-latest  
    steps:
    - name: Run Flyway Migration
      run: |
        # Run Flyway migration commands
        # Example:
        flyway -url=jdbc:postgresql://${{ env.FW_HOST }}:${{ env.FW_PORT }}/${{ env.FW_NAME }} -user=${{ env.FW_USER }} -password=${{ env.FW_PASS }} migrate

  UnitTesting:
    needs: FlywayMigration
    runs-on: ubuntu-latest  
    steps:
    - name: Test Database
      run: |
        npm i
        npm test

  
  