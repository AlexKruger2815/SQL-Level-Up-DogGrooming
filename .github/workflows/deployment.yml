name: CD

on: [push]

env:
  AWS_REGION : "eu-west-1"
  AWS_IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_ARN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_AMI_XXX: ${{ secrets.AWS_AMI_XXX }}                       # Unimplemented
  AWS_SG_XXX: ${{ secrets.AWS_SG_XXX }}                         # Unimplemented
  AWS_SUBNET_XXX: ${{ secrets.AWS_SUBNET_XXX }}                 # Unimplemented

  TF_VAR_db_username: ${{ secrets.DB_NAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  FW_HOST: ${{ secrets.DB_SERVER_HOST_NAME }}
  FW_NAME: ${{ secrets.DB_NAME }}
  FW_USER: ${{ secrets.DB_USERNAME }}
  FW_PASS: ${{ secrets.DB_PASSWORD }}

permissions:
  id-token: write
  contents: read

jobs:

  FlywayMigration:
    runs-on: ubuntu-latest  
    steps:
      - name: Retrieve DB URL and Password from AWS Secrets Manager
        run: |
          export DB_URL=$(aws secretsmanager get-secret-value --secret-id dbcreds --query SecretString --output text | jq -r .host)
          export DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id dbcreds --query SecretString --output text | jq -r .password)
          export DB_USER=$(aws secretsmanager get-secret-value --secret-id dbcreds --query SecretString --output text | jq -r .user)

      - name: Continuous Integration Flyway Clean Migrate
        run: >-
          docker run --rm
          --volume ${{ github.workspace }}/database/migrations:/flyway/sql:ro
          redgate/flyway
          -url="$DB_URL"
          -user="$DB_USER"
          -password="$DB_PASSWORD"
          -cleanDisabled=false clean migrate

  ConfigureAwsAndTerraform:
    needs: FlywayMigration
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v3
        
    # - name: Terraform Init
    #   working-directory: 'Infrastructure'
    #   run: terraform init
    
    # # - name: Terraform Validate
    # #   id: validate
    # #   working-directory: 'Infrastructure'
    # #   run: terraform validate
    
    # - name: Terraform Plan
    #   id: plan
    #   working-directory: 'Infrastructure'
    #   run: terraform plan

        
    # - name: Terraform Apply
    #   working-directory: Infrastructure
    #   run: terraform apply -auto-approve

  # AmazonWebServices:
  #   needs: ConfigureAwsAndTerraform
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Launch AWS Server
  #     run: |
  #       # Use AWS CLI or SDK to launch the server
  #       # Example:
  #       aws ec2 run-instances --image-id ${{ env.AMI-XXX }} --count 1 --instance-type t2.micro --key-name my-key-pair --security-group-ids ${{ env.SG-XXX }} --subnet-id ${{ env.SUBNET-XXX }}

